[tool:pytest]
# Configuración de pytest para entornos cloud-agnostic
# Compatible con AWS, Azure, GCP y cualquier proveedor

# Directorios de pruebas
testpaths = tests

# Patrones de archivos de prueba
python_files = test_*.py test_*_refactored.py
python_classes = Test*
python_functions = test_*

# Marcadores personalizados para diferentes tipos de pruebas cloud
markers =
    cloud: Pruebas que requieren configuración cloud
    aws: Pruebas específicas para AWS
    azure: Pruebas específicas para Azure (legacy)
    database: Pruebas que requieren base de datos
    external_api: Pruebas que interactúan con APIs externas
    webpay: Pruebas de integración con Webpay
    currency: Pruebas del convertidor de monedas
    slow: Pruebas que tardan más de 10 segundos
    integration: Pruebas de integración
    unit: Pruebas unitarias
    mock: Pruebas que usan mocking extensivo

# Configuración de logging para debugging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Configuración de salida
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --durations=10
    --cov=flask_app
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-fail-under=80

# Variables de entorno requeridas para pruebas
env = 
    TESTING=true
    PYTHONPATH=.

# Configuración de timeouts
timeout = 300
timeout_method = thread

# Filtros de warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:flask_sqlalchemy

# Configuración para pruebas paralelas (si se usa pytest-xdist)
# addopts = -n auto 