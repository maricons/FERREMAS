name: FERREMAS CI/CD Pipeline

# Triggers: Se ejecuta en push y pull requests a main y neo
on:
  push:
    branches: [ neo ]
  pull_request:
    branches: [ neo ]

# Jobs: Define el trabajo de integración continua
jobs:
  # Job principal de testing
  test:
    # Ejecuta en Ubuntu latest
    runs-on: ubuntu-latest
    
    # Estrategia de matriz para diferentes versiones de Python (opcional)
    strategy:
      matrix:
        python-version: [3.12]
    
    # Pasos del workflow
    steps:
    # Paso 1: Checkout del código
    - name: Checkout código del repositorio
      uses: actions/checkout@v4
      with:
        # Descarga el historial completo para mejor debugging
        fetch-depth: 0
    
    # Paso 2: Configurar Python
    - name: Configurar Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        # Cache de pip para instalaciones más rápidas
        cache: 'pip'
    
    # Paso 3: Instalar dependencias del sistema (para psycopg2-binary)
    - name: Instalar dependencias del sistema
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libpq-dev \
          gcc \
          g++ \
          unixodbc-dev
    
    # Paso 4: Instalar dependencias de Python
    - name: Instalar dependencias de Python
      run: |
        python -m pip install --upgrade pip
        pip install -r flask_app/requirements.txt
    
    # Paso 5: Ejecutar tests con variables de entorno desde GitHub Secrets
    - name: Ejecutar tests con pytest
      env:
        # Variables de entorno desde GitHub Secrets
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_NAME: ${{ secrets.DB_NAME }}
        WEBPAY_API_KEY: ${{ secrets.WEBPAY_API_KEY }}
        WEBPAY_COMMERCE_CODE: ${{ secrets.WEBPAY_COMMERCE_CODE }}
        WEBPAY_ENVIRONMENT: ${{ secrets.WEBPAY_ENVIRONMENT }}
        MAIL_SERVER: ${{ secrets.MAIL_SERVER }}
        MAIL_PORT: ${{ secrets.MAIL_PORT }}
        MAIL_USE_TLS: ${{ secrets.MAIL_USE_TLS }}
        MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
        MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
        # Variables adicionales que puedan estar en .env
        FLASK_ENV: test
        FLASK_APP: flask_app.app
        # Configuración para tests
        PYTHONPATH: ${{ github.workspace }}
      run: |
        # Ejecutar tests con verbose output
        pytest tests/ -v --tb=short
        
    # Paso 6: Reporte de cobertura (opcional)
    - name: Generar reporte de cobertura
      if: always()
      run: |
        # Instalar coverage si no está en requirements
        pip install coverage
        # Ejecutar tests con coverage
        coverage run -m pytest tests/
        coverage report
        coverage html
    
    # Paso 7: Subir reporte de cobertura como artifact (opcional)
    - name: Subir reporte de cobertura
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/
        retention-days: 30

  # Job adicional para linting (opcional)
  lint:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Instalar herramientas de linting
      run: |
        pip install flake8 black isort
    
    - name: Ejecutar linting
      run: |
        # Verificar formato con black
        black --check flask_app/ tests/
        # Verificar imports con isort
        isort --check-only flask_app/ tests/
        # Verificar estilo con flake8
        flake8 flask_app/ tests/ --max-line-length=88 --extend-ignore=E203,W503 