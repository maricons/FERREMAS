name: FERREMAS CI/CD Pipeline

on:
  push:
    branches: [ neo ]
  pull_request:
    branches: [ neo ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        python-version: [3.12]

    steps:
    - name: Checkout c√≥digo del repositorio
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Configurar Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Instalar dependencias del sistema
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev

    - name: Instalar dependencias de Python
      run: |
        python -m pip install --upgrade pip
        pip install -r flask_app/requirements.txt
        pip install pytest coverage

    - name: Ejecutar tests con pytest
      env:
        SQLALCHEMY_DATABASE_URI: postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@postgres:5432/${{ secrets.DB_NAME }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        WEBPAY_API_KEY: ${{ secrets.WEBPAY_API_KEY }}
        WEBPAY_COMMERCE_CODE: ${{ secrets.WEBPAY_COMMERCE_CODE }}
        WEBPAY_ENVIRONMENT: ${{ secrets.WEBPAY_ENVIRONMENT }}
        MAIL_SERVER: ${{ secrets.MAIL_SERVER }}
        MAIL_PORT: ${{ secrets.MAIL_PORT }}
        MAIL_USE_TLS: ${{ secrets.MAIL_USE_TLS }}
        MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
        MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
        BDE_EMAIL: ${{ secrets.BDE_EMAIL }}
        BDE_PASSWORD: ${{ secrets.BDE_PASSWORD }}
        FLASK_ENV: test
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest tests/ -v --tb=short

    - name: Generar y Subir Reporte de Cobertura
      if: always()
      run: |
        coverage run -m pytest tests/
        coverage html

    - name: Subir artefacto de cobertura
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/
        retention-days: 30