name: FERREMAS CI/CD Pipeline

# Triggers: Se ejecuta en push y pull requests a neo
on:
  push:
    branches: [ neo ]
  pull_request:
    branches: [ neo ]

# Jobs: Define el trabajo de integración continua
jobs:
  # Job principal de testing
  test:
    # Ejecuta en Ubuntu latest
    runs-on: ubuntu-latest
    
    # === CORRECCIÓN #1: AÑADIR SERVICIO DE BASE DE DATOS ===
    # Inicia un contenedor con PostgreSQL antes de que empiecen los pasos.
    services:
      # Define un servicio llamado 'postgres'
      postgres:
        # Usa la imagen oficial de PostgreSQL de Docker Hub
        image: postgres:14-alpine
        # Configura las variables de entorno para la base de datos temporal
        # Deben coincidir con los secretos que usas en el paso de las pruebas
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        # Opciones para asegurar que el servicio esté listo antes de que empiecen las pruebas
        # El puerto 5432 del contenedor se mapeará a un puerto aleatorio en el host.
        # Le decimos al health check que use el puerto 5432.
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    strategy:
      matrix:
        python-version: [3.12]
    
    # Pasos del workflow
    steps:
    # Paso 1: Checkout del código
    - name: Checkout código del repositorio
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    # Paso 2: Configurar Python
    - name: Configurar Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    # Paso 3: Instalar dependencias del sistema
    - name: Instalar dependencias del sistema
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev gcc g++ unixodbc-dev
    
    # Paso 4: Instalar dependencias de Python
    - name: Instalar dependencias de Python
      run: |
        python -m pip install --upgrade pip
        pip install -r flask_app/requirements.txt
        # Instalar dependencias de desarrollo
        pip install pytest coverage
    
    # Paso 5: Ejecutar tests con variables de entorno desde GitHub Secrets
    - name: Ejecutar tests con pytest
      env:
        # Variables de entorno desde GitHub Secrets
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        
        # === CORRECCIÓN #2: APUNTAR AL SERVICIO DE BASE DE DATOS ===
        # Apunta al servicio 'postgres' que se está ejecutando en localhost
        DB_HOST: postgres
        # El puerto del servicio se mapea dinámicamente. GitHub nos lo da en 'services.postgres.ports[5432]'
        DB_PORT: 5432
        DB_NAME: ${{ secrets.DB_NAME }}

        WEBPAY_API_KEY: ${{ secrets.WEBPAY_API_KEY }}
        WEBPAY_COMMERCE_CODE: ${{ secrets.WEBPAY_COMMERCE_CODE }}
        WEBPAY_ENVIRONMENT: ${{ secrets.WEBPAY_ENVIRONMENT }}
        MAIL_SERVER: ${{ secrets.MAIL_SERVER }}
        MAIL_PORT: ${{ secrets.MAIL_PORT }}
        MAIL_USE_TLS: ${{ secrets.MAIL_USE_TLS }}
        MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
        MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
        BDE_EMAIL: ${{ secrets.BDE_EMAIL }}
        BDE_PASSWORD: ${{ secrets.BDE_PASSWORD }}
        
        # Variables adicionales
        FLASK_ENV: test
        PYTHONPATH: ${{ github.workspace }}

      run: |
        # Ejecutar tests con verbose output
        pytest tests/ -v --tb=short
        
    # Paso 6: Generar reporte de cobertura
    - name: Generar reporte de cobertura
      if: always() # Se ejecuta incluso si el paso anterior falla
      run: |
        coverage run -m pytest tests/
        coverage report
        coverage html
    
    # Paso 7: Subir reporte de cobertura
    - name: Subir reporte de cobertura
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/
        retention-days: 30

  # Job adicional para linting (opcional pero recomendado)
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
    - name: Instalar herramientas de linting
      run: pip install flake8 black isort
    - name: Ejecutar linting
      run: |
        black --check flask_app/ tests/
        isort --check-only flask_app/ tests/
        flake8 flask_app/ tests/ --max-line-length=88 --extend-ignore=E203,W503
